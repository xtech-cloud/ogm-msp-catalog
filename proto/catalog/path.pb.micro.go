// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/catalog/path.proto

package catalog

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Path service

func NewPathEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Path service

type PathService interface {
	// 添加
	Add(ctx context.Context, in *PathAddRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 更新
	Update(ctx context.Context, in *PathUpdateRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 移除
	Remove(ctx context.Context, in *PathDeleteRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 获取
	Get(ctx context.Context, in *PathGetRequest, opts ...client.CallOption) (*PathGetResponse, error)
	// 列举
	List(ctx context.Context, in *PathListRequest, opts ...client.CallOption) (*PathListResponse, error)
	// 搜索
	Search(ctx context.Context, in *PathSearchRequest, opts ...client.CallOption) (*PathListResponse, error)
}

type pathService struct {
	c    client.Client
	name string
}

func NewPathService(name string, c client.Client) PathService {
	return &pathService{
		c:    c,
		name: name,
	}
}

func (c *pathService) Add(ctx context.Context, in *PathAddRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Path.Add", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathService) Update(ctx context.Context, in *PathUpdateRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Path.Update", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathService) Remove(ctx context.Context, in *PathDeleteRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Path.Remove", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathService) Get(ctx context.Context, in *PathGetRequest, opts ...client.CallOption) (*PathGetResponse, error) {
	req := c.c.NewRequest(c.name, "Path.Get", in)
	out := new(PathGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathService) List(ctx context.Context, in *PathListRequest, opts ...client.CallOption) (*PathListResponse, error) {
	req := c.c.NewRequest(c.name, "Path.List", in)
	out := new(PathListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathService) Search(ctx context.Context, in *PathSearchRequest, opts ...client.CallOption) (*PathListResponse, error) {
	req := c.c.NewRequest(c.name, "Path.Search", in)
	out := new(PathListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Path service

type PathHandler interface {
	// 添加
	Add(context.Context, *PathAddRequest, *UuidResponse) error
	// 更新
	Update(context.Context, *PathUpdateRequest, *UuidResponse) error
	// 移除
	Remove(context.Context, *PathDeleteRequest, *UuidResponse) error
	// 获取
	Get(context.Context, *PathGetRequest, *PathGetResponse) error
	// 列举
	List(context.Context, *PathListRequest, *PathListResponse) error
	// 搜索
	Search(context.Context, *PathSearchRequest, *PathListResponse) error
}

func RegisterPathHandler(s server.Server, hdlr PathHandler, opts ...server.HandlerOption) error {
	type path interface {
		Add(ctx context.Context, in *PathAddRequest, out *UuidResponse) error
		Update(ctx context.Context, in *PathUpdateRequest, out *UuidResponse) error
		Remove(ctx context.Context, in *PathDeleteRequest, out *UuidResponse) error
		Get(ctx context.Context, in *PathGetRequest, out *PathGetResponse) error
		List(ctx context.Context, in *PathListRequest, out *PathListResponse) error
		Search(ctx context.Context, in *PathSearchRequest, out *PathListResponse) error
	}
	type Path struct {
		path
	}
	h := &pathHandler{hdlr}
	return s.Handle(s.NewHandler(&Path{h}, opts...))
}

type pathHandler struct {
	PathHandler
}

func (h *pathHandler) Add(ctx context.Context, in *PathAddRequest, out *UuidResponse) error {
	return h.PathHandler.Add(ctx, in, out)
}

func (h *pathHandler) Update(ctx context.Context, in *PathUpdateRequest, out *UuidResponse) error {
	return h.PathHandler.Update(ctx, in, out)
}

func (h *pathHandler) Remove(ctx context.Context, in *PathDeleteRequest, out *UuidResponse) error {
	return h.PathHandler.Remove(ctx, in, out)
}

func (h *pathHandler) Get(ctx context.Context, in *PathGetRequest, out *PathGetResponse) error {
	return h.PathHandler.Get(ctx, in, out)
}

func (h *pathHandler) List(ctx context.Context, in *PathListRequest, out *PathListResponse) error {
	return h.PathHandler.List(ctx, in, out)
}

func (h *pathHandler) Search(ctx context.Context, in *PathSearchRequest, out *PathListResponse) error {
	return h.PathHandler.Search(ctx, in, out)
}
